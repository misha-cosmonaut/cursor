---
alwaysApply: true
---

# Генератор отчёта-презентации

## Задача
Создать HTML-генератор отчёта для подразделения компании. Пользователь открывает файл в браузере, заполняет данные в удобной форме или импортирует JSON, после чего получает автоматически сгенерированный отчёт-презентацию для печати или сохранения. Отчёт должен содержать цели, прогресс, достижения, вехи и динамику (план/факт), визуализированную графиками и диаграммами.

## Бизнес-процесс
- Руководители подразделений устанавливают цели.
- Департамент движется к их достижению.
- На регулярных собраниях (месяц/квартал/итог) предоставляют отчёт с динамикой и историей: план vs факт.

## UX
- UX-концепция: редактор → презентация
- Интуитивный ввод данных и понятная визуализация
- Фокус: динамика и исторический контекст (графики план/факт, история изменений).

## Техническая база
- Формат: один HTML-файл (легко использовать команде).
- Визуализация: Chart.js, ApexCharts.js (или аналог).
- Механизмы:
  - Ручной ввод и генерация отчёта;
  - Сохранение / печать PDF
  - Импорт/экспорт JSON – цельная операция со всем отчетом для сокращения ручного ввода:
    - Всю структуру данных можно импортировать из предыдущих отчётов, чтобы не вбивать повторно. При импорте не заполняются только значения текущего периода, за который делается отчет
    - Цель и всю ее структуру можно экспортировать, чтобы импортировать в следующие отчеты. При экспорте текущие значения целей и критериев сохраняются в JSON → в будущем отчёте при импорте они должны попадать в historicalValues
  - Все расчетные значения пересчитываются динамически

## Бизнес-логика генератора
- Есть цель. Их может быть несколько. У цели есть название, описание, формат, набор значений (начальное, текущее, целевое, промежуточные плановые, промежуточные исторические).
- У цели есть критерии (с такой же структурой, как у цели). Их тоже может несколько.
- У цели еще есть достижения (конкретные результаты, влияющие на цель или на критерии, с названием, датой и описанием) и вехи (события в прошлом, будущем, или настоящем в разном статусе (completed, inProgress, planned) с названием, датой и опциональным влиянием на цель или критерии).
- Пользователь вносит значения, получает визуализацию, может генерировать презентацию с желаемой визуализацией.

## Презентация с визуализацией
- Для каждой цели – своя страница презентации
- На презентации одной цели есть такие блоки:
  - Цель: общая информация о цели и ее значениях и датах (начальные, текущие, плановые)
  - Прогресс с момента начала, общий прогресс в процентах, прогресс с последнего исторического значения.
  - Большой график сравнения план/факт по цели
  - Критерии (от 1 до N):
    - общая информация о критерии и его значениях и датах (начальные, текущие, плановые)
    - Прогресс с момента начала, общий прогресс в процентах, прогресс с последнего исторического значения.
    - Мини-график сравнения план/факт по критерию.
  - Достижения с влиянием
  - Вехи с таймлайном

## Логика построения графиков
- Ось X – время. Начало – за месяц до даты начального значения. Конец – через месяц после даты целевого значения цели. Шаг – адаптивный под период. Отметки на оси – даты значений
- Ось Y – значения. Начало – ноль. Конец – на 10% больше, чем целевое значение. Шаг – адаптивный под диапазон значений. Отметки на оси – значения.
- Плановый график – линейный график по плановым значениям и датам. Точки на графике – значения.
- Фактический график – линейный график по текущему и историческим значениям и их датам. Точки на графике – значения.
- На оси координат отображаются оба графика, визуально видно сравнение план/факт

## Формальная структура данных отчёта
### 1. Report (Отчёт)
- reportDate (Дата отчёта)
- department (Департамент)
- responsible (Ответственный)
- goals (Цели) — список
- achievements (Достижения) — список
- milestones (Вехи) — список

### 2. Goal (Цель)
- id
- title (Название)
- description (Описание)
- unit (Единица измерения: %, ₽, шт. и т.п.)
- startValue { value, date }
- targetValue { value, date }
- currentValue { value, date }
- plannedValues [ { value, date } ]
- historicalValues [ { value, date } ]
- progressTotal вычисляемый параметр: current – start
- progressPercentTotal вычисляемый параметр: ( (current – start) / (target – start) ) * 100
- progressSinceLastHistorical вычисляемый параметр: current – last historical
- criteria (Критерии/подцели, см. Criteria)

### 3. Criteria (Критерий / Подцель)
(та же структура, что и Goal)
- id
- title
- description
- unit
- startValue { value, date }
- targetValue { value, date }
- currentValue { value, date }
- plannedValues [ { value, date } ]
- historicalValues [ { value, date } ]
- progressTotal вычисляемый параметр: current – start
- progressPercentTotal вычисляемый параметр: ( (current – start) / (target – start) ) * 100
- progressSinceLastHistorical вычисляемый параметр: current – last historical

### 4. Achievement (Достижение)
- id
- title (Название достижения)
- date
- description (Общее описание)
- impact (Влияние на цель/критерий)
- relatedGoalId (ID цели)
- relatedCriterionId (ID критерия, если применимо)

### 5. Milestone (Веха)
- id
- title (Название события)
- date
- description
- status (completed, inProgress, planned)
- relatedGoalId (Опционально)
- relatedCriterionId (Опционально)
